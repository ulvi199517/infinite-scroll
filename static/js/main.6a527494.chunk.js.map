{"version":3,"sources":["loader.svg","App.js","reportWebVitals.js","index.js"],"names":["App","props","getPhotos","a","setState","isLoading","apiUrl","fetch","response","json","data","photos","state","totalImages","length","console","log","imageLoaded","imagesLoaded","ready","window","onscroll","innerHeight","scrollY","document","body","offsetHeight","this","className","map","photo","links","html","id","description","alt_description","title","image","urls","regular","href","onLoad","alt","src","loader","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"yRAAe,G,MAAA,IAA0B,oC,OC0F1BA,E,kDArFb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAqBPC,UAtBiB,sBAsBL,gCAAAC,EAAA,6DACX,EAAKC,SAAS,CAACC,WAAW,IACZ,GACA,8CACRC,EAJK,4DAGG,8CAHH,kBAEG,IAFH,kBAMcC,MAAMD,GANpB,cAMHE,EANG,iBAOUA,EAASC,OAPnB,QAOHC,EAPG,OAQT,EAAKN,SAAS,CAACO,OAAO,GAAD,mBAAM,EAAKC,MAAMD,QAAjB,YAA4BD,IAAOG,YAAa,EAAKD,MAAMC,YAAcH,EAAKI,SAR1F,kDAUTC,QAAQC,IAAR,MAVS,0DAtBK,EAmClBC,YAAc,WACZ,EAAKb,SAAS,CAACc,aAAc,EAAKN,MAAMM,aAAe,IAAI,WACtD,EAAKN,MAAMM,eAAiB,EAAKN,MAAMC,aACxC,EAAKT,SAAS,CAACe,OAAO,EAAMd,WAAW,QApC3C,EAAKO,MAAQ,CACXD,OAAQ,GACRN,WAAW,EACXc,OAAO,EACPN,YAAa,EACbK,aAAc,GAGhBE,OAAOC,SAAW,WAAO,IAChBnB,EADe,eACfA,UAEJkB,OAAOE,YAAcF,OAAOG,SAAWC,SAASC,KAAKC,aAAe,KAAQ,EAAKd,MAAMO,OACxF,EAAKf,SAAS,CAACe,OAAO,IAAQ,WAC5BjB,QAfU,E,qDA6ClB,WAEEyB,KAAKzB,c,oBAEP,WAAS,IAAD,SACsByB,KAAKf,MAA1BD,EADD,EACCA,OAAQN,EADT,EACSA,UACf,OACE,sBAAKuB,UAAU,MAAf,UACA,gEACA,uBAGI,sBAAKA,UAAU,kBAAf,UAEMjB,EAAOkB,KAAI,SAACC,GACV,IAAMC,EAAQD,EAAMC,MAAMC,KACpBC,EAAKH,EAAMG,GACXC,EAAcJ,EAAMK,gBACpBC,EAAQN,EAAMK,gBACdE,EAAQP,EAAMQ,KAAKC,QACzB,OACI,mBAAGC,KAAMT,EAAT,SACE,qBAAKU,OAAQ,EAAKxB,YAAayB,IAAKR,EAAaS,IAAKN,EAAOD,MAAOA,KADjDH,MAO/B5B,EAEE,qBAAKuB,UAAU,mBAAf,SACI,qBAAKe,IAAKC,EAAQF,IAAI,UAAUd,UAAU,aAE9C,e,GA/EIiB,IAAMC,WCQTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlC,SAASmC,eAAe,SAM1BZ,M","file":"static/js/main.6a527494.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/loader.7c452f59.svg\";","import './App.css';\nimport loader from './loader.svg';\nimport React from 'react';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      photos: [],\n      isLoading: false,\n      ready: false,\n      totalImages: 0,\n      imagesLoaded: 0\n      \n    }\n    window.onscroll = () => {\n      const {getPhotos} = this;\n    \n      if(window.innerHeight + window.scrollY >= document.body.offsetHeight - 1000 && this.state.ready){\n        this.setState({ready: false}, () => {\n          getPhotos();\n        })\n      }\n        \n      }\n    }\n    \n   getPhotos = async () => {\n    this.setState({isLoading: true});\n    const count = 10;\n    const apiKey ='JY3Kdz5zSiwA-NHacB4PqhGjKf38md4NkLAmqvPkMck';\n    const apiUrl = `https://api.unsplash.com/photos/random/?client_id=${apiKey}&count=${count}`;\n    try{\n      const response = await fetch(apiUrl);\n      const data = await response.json();\n      this.setState({photos: [...this.state.photos, ...data], totalImages: this.state.totalImages + data.length });\n    } catch(error) {\n      console.log(error);\n    }\n  }\n  imageLoaded = () => {\n    this.setState({imagesLoaded: this.state.imagesLoaded + 1}, () => {\n      if(this.state.imagesLoaded === this.state.totalImages){\n        this.setState({ready: true, isLoading: false});\n      }\n    });\n    \n\n\n  }\n  componentDidMount() {\n    //intial load of photos\n    this.getPhotos();\n  }\n  render(){\n    const {photos, isLoading} = this.state;\n    return (\n      <div className=\"App\">\n      <h1>UNSPLASH API - INFINITE SCROLL</h1>\n      <hr/>\n      \n      \n          <div className='image-container'>\n          {    \n                photos.map((photo) => {\n                  const links = photo.links.html;\n                  const id = photo.id;\n                  const description = photo.alt_description;\n                  const title = photo.alt_description;\n                  const image = photo.urls.regular;\n                  return(\n                      <a href={links} key={id}>\n                        <img onLoad={this.imageLoaded} alt={description} src={image} title={title} />\n                      </a>\n                  )   \n              }) \n          }\n          {\n            isLoading \n            ?\n              <div className='loader-container'>\n                  <img src={loader} alt='Loading' className='loader'/>\n              </div>\n            : null\n          }    \n          </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}